%% main
clc; clear all;

% add neccessary path
addpath('src');
addpath('data');

% sonnets = prep_sonnets();
% 
% [letters, letter_counts] = letter_histogram(sonnets);
% 
% key = 'ABCD';
% 
% word = upper('cryptoisshortforcryptography');
% 
% tic;
% 
% ciphered = encrypt(word, key, letters)
% 
% toc;
% 
% tic;
% 
% deciphered = decrypt(ciphered, key, letters)
% 
% toc

function ngrams = list_all_ngrams(text, n)
    % Ensure n is valid
    if n > numel(text)
        ngrams = {}; % Return empty if n is larger than the text
        return;
    end

    % Generate all n-grams using array slicing
    ngrams = arrayfun(@(i) text(i:i+n-1), 1:(numel(text)-n+1), 'UniformOutput', false);
end

word = upper('cryptoisshortforcryptography');

ngrams = list_all_ngrams(word, 4)

% Initialize result
ngram_distances = cell(numel(ngrams), 2);

% Loop over unique n-grams
for i = 1:numel(ngrams)
    current_ngram = ngrams{i};
    indices = strfind(text, current_ngram); % Find all occurrences of the n-gram

    if numel(indices) > 1
        % If more than one occurrence, calculate max distance
        max_distance = max(diff(indices));
        ngram_distances{i, 1} = current_ngram;
        ngram_distances{i, 2} = max_distance;
    else
        % If only one occurrence, assign length of input word
        ngram_distances{i, 1} = current_ngram;
        ngram_distances{i, 2} = numel(text);
    end
end

% Remove duplicates (only keep unique n-grams and distances)
[~, unique_indices] = unique(ngrams, 'stable');
ngram_distances = ngram_distances(unique_indices, :)